{"version":3,"sources":["http-common.ts","services/tutorial.service.ts","components/add-tutorial.component.tsx","components/tutorial.component.tsx","components/tutorials-list.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","AddTutorial","props","onChangeTitle","bind","onChangeDescription","saveTutorial","newTutorial","state","description","published","submitted","e","this","setState","target","value","TutorialDataService","then","response","console","log","catch","className","onClick","htmlFor","type","required","onChange","name","Component","Tutorial","getTutorial","updatePublished","updateTutorial","deleteTutorial","currentTutorial","message","match","params","prevState","status","update","history","push","TutorialsList","onChangeSearchTitle","retrieveTutorials","refreshList","setActiveTutorial","removeAllTutorials","serchTitle","tutorials","currentIndex","searchTitle","getAll","tutorial","index","deleteAll","findByTitle","placeholder","map","to","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f029675.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://localhost:8080/api\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","/* other code\nimport http from \"../http-common\";\nimport ITutorialData from \"../types/tutorial.type\"\n\nclass TutorialDataService {\n  getAll() {\n    return http.get(\"/tutorials\");\n  }\n\n  get(id: string) {\n    return http.get(`/tutorials/${id}`);\n  }\n\n  create(data: ITutorialData) {\n    return http.post(\"/tutorials\", data);\n  }\n\n  update(data: ITutorialData, id: any) {\n    return http.put(`/tutorials/${id}`, data);\n  }\n\n  delete(id: any) {\n    return http.delete(`/tutorials/${id}`);\n  }\n\n  deleteAll() {\n    return http.delete(`/tutorials`);\n  }\n\n  findByTitle(title: string) {\n    return http.get(`/tutorials?title=${title}`);\n  }\n}\n\nexport default new TutorialDataService();\n*/\n\n// mycode\nimport http from \"../http-common\";\nimport ITutorialData from \"../types/tutorial.type\"\n\nclass TutorialDataService {\n  getAll() {\n    return http.get(\"/tutorials\");\n  }\n\n  get(id: string) {\n    return http.get(`/tutorials/${id}`);\n  }\n\n  create(data: ITutorialData) {\n    return http.post(\"/tutorials\", data);\n  }\n\n  update(data: ITutorialData, id: any) {\n    return http.put(`/tutorials/${id}`, data);\n  }\n\n  delete(id: any) {\n    return http.delete(`/tutorials/${id}`);\n  }\n\n  deleteAll() {\n    return http.delete(`/tutorials`);\n  }\n\n  findByTitle(title: string) {\n    return http.get(`/tutorials?title=${title}`);\n  }\n}\n\nexport default new TutorialDataService();\n\n//*/","/* other code\nimport { Component, ChangeEvent } from \"react\";\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport TutorialDataService from \"../services/tutorial.service\";\nimport ITutorialData from \"../types/tutorial.type\";\n\ninterface RouterProps { // type for `match.params`\n  id: string; // must be type `string` since value comes from the URL\n}\n\ntype Props = RouteComponentProps<RouterProps>;\n\ntype State = {\n  currentTutorial: ITutorialData;\n  message: string;\n}\n\nexport default class Tutorial extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.getTutorial = this.getTutorial.bind(this);\n    this.updatePublished = this.updatePublished.bind(this);\n    this.updateTutorial = this.updateTutorial.bind(this);\n    this.deleteTutorial = this.deleteTutorial.bind(this);\n\n    this.state = {\n      currentTutorial: {\n        id: null,\n        title: \"\",\n        description: \"\",\n        published: false,\n      },\n      message: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.getTutorial(this.props.match.params.id);\n  }\n\n  onChangeTitle(e: ChangeEvent<HTMLInputElement>) {\n    const title = e.target.value;\n\n    this.setState(function (prevState) {\n      return {\n        currentTutorial: {\n          ...prevState.currentTutorial,\n          title: title,\n        },\n      };\n    });\n  }\n\n  onChangeDescription(e: ChangeEvent<HTMLInputElement>) {\n    const description = e.target.value;\n\n    this.setState((prevState) => ({\n      currentTutorial: {\n        ...prevState.currentTutorial,\n        description: description,\n      },\n    }));\n  }\n\n  getTutorial(id: string) {\n    TutorialDataService.get(id)\n      .then((response) => {\n        this.setState({\n          currentTutorial: response.data,\n        });\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  updatePublished(status: boolean) {\n    const data: ITutorialData = {\n      id: this.state.currentTutorial.id,\n      title: this.state.currentTutorial.title,\n      description: this.state.currentTutorial.description,\n      published: status,\n    };\n\n    TutorialDataService.update(data, this.state.currentTutorial.id)\n      .then((response) => {\n        this.setState((prevState) => ({\n          currentTutorial: {\n            ...prevState.currentTutorial,\n            published: status,\n          },\n          message: \"The status was updated successfully!\"\n        }));\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  updateTutorial() {\n    TutorialDataService.update(\n      this.state.currentTutorial,\n      this.state.currentTutorial.id\n    )\n      .then((response) => {\n        console.log(response.data);\n        this.setState({\n          message: \"The tutorial was updated successfully!\",\n        });\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  deleteTutorial() {\n    TutorialDataService.delete(this.state.currentTutorial.id)\n      .then((response) => {\n        console.log(response.data);\n        this.props.history.push(\"/tutorials\");\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  render() {\n    const { currentTutorial } = this.state;\n\n    return (\n      <div>\n        {currentTutorial ? (\n          <div className=\"edit-form\">\n            <h4>Tutorial</h4>\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"title\">Title</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"title\"\n                  value={currentTutorial.title}\n                  onChange={this.onChangeTitle}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"description\">Description</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"description\"\n                  value={currentTutorial.description}\n                  onChange={this.onChangeDescription}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label>\n                  <strong>Status:</strong>\n                </label>\n                {currentTutorial.published ? \"Published\" : \"Pending\"}\n              </div>\n            </form>\n\n            {currentTutorial.published ? (\n              <button\n                className=\"badge badge-primary mr-2\"\n                onClick={() => this.updatePublished(false)}\n              >\n                UnPublish\n              </button>\n            ) : (\n              <button\n                className=\"badge badge-primary mr-2\"\n                onClick={() => this.updatePublished(true)}\n              >\n                Publish\n              </button>\n            )}\n\n            <button\n              className=\"badge badge-danger mr-2\"\n              onClick={this.deleteTutorial}\n            >\n              Delete\n            </button>\n\n            <button\n              type=\"submit\"\n              className=\"badge badge-success\"\n              onClick={this.updateTutorial}\n            >\n              Update\n            </button>\n            <p>{this.state.message}</p>\n          </div>\n        ) : (\n          <div>\n            <br />\n            <p>Please click on a Tutorial...</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n*/\n\n///* mycode\nimport { Component, ChangeEvent } from \"react\"\nimport TutorialDataService from \"../services/tutorial.service\"\nimport ITutorialData from \"../types/tutorial.type\"\n\ntype Props = {}\n\ntype State = ITutorialData & {\n  submitted: boolean\n}\n\nexport default class AddTutorial extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.onChangeTitle = this.onChangeTitle.bind(this)\n    this.onChangeDescription = this.onChangeDescription.bind(this)\n    this.saveTutorial = this.saveTutorial.bind(this)\n    this.newTutorial = this.newTutorial.bind(this)\n\n    this.state = {\n      id: null,\n      title: \"\",\n      description: \"\",\n      published: false,\n      submitted: false\n    }\n  }\n\n  onChangeTitle(e: ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      title: e.target.value\n    })\n  }\n\n  onChangeDescription(e: ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      description: e.target.value\n    })\n  }\n\n  saveTutorial() {\n    const data: ITutorialData = {\n      title: this.state.title,\n      description: this.state.description\n    }\n    TutorialDataService.create(data)\n      .then(response => {\n        this.setState({\n          id:response.data.id,\n          title: response.data.title,\n          description: response.data.description,\n          published: response.data.published,\n          submitted: true\n        })\n        console.log(response.data)\n      })\n      .catch(e => {\n        console.log(e)\n      })\n  }\n\n  newTutorial() {\n    this.setState({\n      id: null,\n      title: \"\",\n      description: \"\",\n      published: false,\n      submitted: false\n    })\n  }\n\n  render() {\n    const { submitted, title, description } = this.state;\n\n    return (\n      <div className=\"submit-form\">\n        {submitted ? (\n          <div>\n           <h4>You submitted successfully!</h4>\n           <button className=\"btn btn-success\" onClick={this.newTutorial}>\n             Add\n            </button> \n          </div>\n        ) : (\n          <div>\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">Title</label>\n              <input \n                type=\"text\"\n                className=\"form-control\"\n                id=\"title\"\n                required\n                value={title}\n                onChange={this.onChangeTitle}\n                name=\"title\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"description\">Description</label>\n                <input \n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"title\"\n                  required\n                  value={description}\n                  onChange={this.onChangeDescription}\n                  name=\"description\"\n                />\n            </div>\n\n            <button onClick={this.saveTutorial} className=\"btn btn-success\">\n              Submit\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\n//*/","/*\nimport { Component, ChangeEvent } from \"react\";\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport TutorialDataService from \"../services/tutorial.service\";\nimport ITutorialData from \"../types/tutorial.type\";\n\ninterface RouterProps { // type for `match.params`\n  id: string; // must be type `string` since value comes from the URL\n}\n\ntype Props = RouteComponentProps<RouterProps>;\n\ntype State = {\n  currentTutorial: ITutorialData;\n  message: string;\n}\n\nexport default class Tutorial extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.getTutorial = this.getTutorial.bind(this);\n    this.updatePublished = this.updatePublished.bind(this);\n    this.updateTutorial = this.updateTutorial.bind(this);\n    this.deleteTutorial = this.deleteTutorial.bind(this);\n\n    this.state = {\n      currentTutorial: {\n        id: null,\n        title: \"\",\n        description: \"\",\n        published: false,\n      },\n      message: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.getTutorial(this.props.match.params.id);\n  }\n\n  onChangeTitle(e: ChangeEvent<HTMLInputElement>) {\n    const title = e.target.value;\n\n    this.setState(function (prevState) {\n      return {\n        currentTutorial: {\n          ...prevState.currentTutorial,\n          title: title,\n        },\n      };\n    });\n  }\n\n  onChangeDescription(e: ChangeEvent<HTMLInputElement>) {\n    const description = e.target.value;\n\n    this.setState((prevState) => ({\n      currentTutorial: {\n        ...prevState.currentTutorial,\n        description: description,\n      },\n    }));\n  }\n\n  getTutorial(id: string) {\n    TutorialDataService.get(id)\n      .then((response) => {\n        this.setState({\n          currentTutorial: response.data,\n        });\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  updatePublished(status: boolean) {\n    const data: ITutorialData = {\n      id: this.state.currentTutorial.id,\n      title: this.state.currentTutorial.title,\n      description: this.state.currentTutorial.description,\n      published: status,\n    };\n\n    TutorialDataService.update(data, this.state.currentTutorial.id)\n      .then((response) => {\n        this.setState((prevState) => ({\n          currentTutorial: {\n            ...prevState.currentTutorial,\n            published: status,\n          },\n          message: \"The status was updated successfully!\"\n        }));\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  updateTutorial() {\n    TutorialDataService.update(\n      this.state.currentTutorial,\n      this.state.currentTutorial.id\n    )\n      .then((response) => {\n        console.log(response.data);\n        this.setState({\n          message: \"The tutorial was updated successfully!\",\n        });\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  deleteTutorial() {\n    TutorialDataService.delete(this.state.currentTutorial.id)\n      .then((response) => {\n        console.log(response.data);\n        this.props.history.push(\"/tutorials\");\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  render() {\n    const { currentTutorial } = this.state;\n\n    return (\n      <div>\n        {currentTutorial ? (\n          <div className=\"edit-form\">\n            <h4>Tutorial</h4>\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"title\">Title</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"title\"\n                  value={currentTutorial.title}\n                  onChange={this.onChangeTitle}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"description\">Description</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"description\"\n                  value={currentTutorial.description}\n                  onChange={this.onChangeDescription}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label>\n                  <strong>Status:</strong>\n                </label>\n                {currentTutorial.published ? \"Published\" : \"Pending\"}\n              </div>\n            </form>\n\n            {currentTutorial.published ? (\n              <button\n                className=\"badge badge-primary mr-2\"\n                onClick={() => this.updatePublished(false)}\n              >\n                UnPublish\n              </button>\n            ) : (\n              <button\n                className=\"badge badge-primary mr-2\"\n                onClick={() => this.updatePublished(true)}\n              >\n                Publish\n              </button>\n            )}\n\n            <button\n              className=\"badge badge-danger mr-2\"\n              onClick={this.deleteTutorial}\n            >\n              Delete\n            </button>\n\n            <button\n              type=\"submit\"\n              className=\"badge badge-success\"\n              onClick={this.updateTutorial}\n            >\n              Update\n            </button>\n            <p>{this.state.message}</p>\n          </div>\n        ) : (\n          <div>\n            <br />\n            <p>Please click on a Tutorial...</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n*/\n\n///* mycode\nimport { Component, ChangeEvent } from \"react\"\nimport { RouteComponentProps } from \"react-router-dom\"\n\nimport TutorialDataService from \"../services/tutorial.service\"\nimport ITutorialData from \"../types/tutorial.type\"\n\ninterface RouterProps {\n  id: string\n}\n\ntype Props = RouteComponentProps<RouterProps>\n\ntype State = {\n  currentTutorial: ITutorialData\n  message: string\n}\n\nexport default class Tutorial extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.onChangeTitle = this.onChangeTitle.bind(this)\n    this.onChangeDescription = this.onChangeDescription.bind(this)\n    this.getTutorial = this.getTutorial.bind(this)\n    this.updatePublished = this.updatePublished.bind(this)\n    this.updateTutorial = this.updateTutorial.bind(this)\n    this.deleteTutorial = this.deleteTutorial.bind(this)\n\n    this.state = {\n      currentTutorial: {\n        id: null,\n        title: \"\",\n        description: \"\",\n        published: false,\n      },\n      message: \"\",\n    }\n  }\n\n  componentDidMount() {\n    this.getTutorial(this.props.match.params.id)\n  }\n\n  onChangeTitle(e: ChangeEvent<HTMLInputElement>) {\n    const title = e.target.value\n\n    this.setState(function (prevState) {\n      return {\n        currentTutorial: {\n          ...prevState.currentTutorial,\n          title: title,\n        },\n      }\n    })\n  }\n\n  onChangeDescription(e: ChangeEvent<HTMLInputElement>) {\n    const description = e.target.value\n\n    this.setState((prevState) => ({\n      currentTutorial: {\n        ...prevState.currentTutorial,\n        description: description,\n      },\n    }))\n  }\n\n  getTutorial(id: string) {\n    TutorialDataService.get(id)\n      .then((response) => {\n        this.setState({\n          currentTutorial: response.data,\n        })\n        console.log(response.data)\n      })\n      .catch((e) => {\n        console.log(e)\n      })\n  }\n\n  updatePublished(status: boolean) {\n    const data: ITutorialData = {\n      id: this.state.currentTutorial.id,\n      title: this.state.currentTutorial.title,\n      description: this.state.currentTutorial.description,\n      published: status,\n    }\n\n    TutorialDataService.update(data, this.state.currentTutorial.id)\n      .then((response) => {\n        this.setState((prevState) => ({\n          currentTutorial: {\n            ...prevState.currentTutorial,\n            published:status,\n          },\n          message: \"The status was updated successfully!\"\n        }))\n        console.log(response.data)\n      })\n      .catch((e) => {\n        console.log(e)\n      })\n  }\n\n  updateTutorial() {\n    TutorialDataService.update(\n      this.state.currentTutorial,\n      this.state.currentTutorial.id\n    )\n      .then((response) => {\n        console.log(response.data)\n        this.setState({\n          message: \"The tutorial was updated successfully!\"\n        })\n      })\n      .catch((e) => {\n        console.log(e)\n      })\n  }\n\n  deleteTutorial() {\n    TutorialDataService.delete(this.state.currentTutorial.id)\n      .then((response) => {\n        console.log(response.data)\n        this.props.history.push(\"/tutorials\")\n      })\n      .catch((e) => {\n        console.log(e)\n      })\n  }\n\n  render() {\n    const { currentTutorial } = this.state\n\n    return (\n      <div>\n        {currentTutorial ? (\n          <div className=\"edit-form\">\n              <h4>Tutorial</h4>\n              <form>\n                <div className=\"form-group\">\n                  <label htmlFor=\"title\">Title</label>\n                  <input \n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"title\"\n                    value={currentTutorial.title}\n                    onChange={this.onChangeTitle}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"description\">Description</label>\n                  <input \n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"descriptiptino\"\n                    value={currentTutorial.description}\n                    onChange={this.onChangeDescription}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>\n                    <strong>Status:</strong>\n                  </label>\n                  {currentTutorial.published ? \"Published\" : \"Pending\"}\n                </div>\n              </form>\n\n              {currentTutorial.published ? (\n                <button \n                  className=\"badge badge-primary mr-m2\"\n                  onClick={() => this.updatePublished(false)}\n                >\n                  Unpublish\n                </button>\n              ) : (\n                <button \n                  className=\"badge badge-primary mr-m2\"\n                  onClick={() => this.updatePublished(true)}\n                >\n                  Publish\n                </button>\n              )}\n              <button \n                className=\"badge badge-danger mr-2\"\n                onClick={this.deleteTutorial}\n              >\n                Delete\n              </button>\n\n              <button \n                type=\"submit\"\n                className=\"badge\"\n                onClick={this.updateTutorial}\n              >\n                Update\n              </button>\n              <p>{this.state.message}</p>\n          </div>\n        ) : (\n          <div>\n            <br />\n            <p>Please click on a Tutorial...</p>\n          </div>\n        )}\n      </div>\n    )\n  }  \n}\n\n//*/","/*\nimport { Component, ChangeEvent } from \"react\";\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport TutorialDataService from \"../services/tutorial.service\";\nimport ITutorialData from \"../types/tutorial.type\";\n\ninterface RouterProps { // type for `match.params`\n  id: string; // must be type `string` since value comes from the URL\n}\n\ntype Props = RouteComponentProps<RouterProps>;\n\ntype State = {\n  currentTutorial: ITutorialData;\n  message: string;\n}\n\nexport default class Tutorial extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.getTutorial = this.getTutorial.bind(this);\n    this.updatePublished = this.updatePublished.bind(this);\n    this.updateTutorial = this.updateTutorial.bind(this);\n    this.deleteTutorial = this.deleteTutorial.bind(this);\n\n    this.state = {\n      currentTutorial: {\n        id: null,\n        title: \"\",\n        description: \"\",\n        published: false,\n      },\n      message: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.getTutorial(this.props.match.params.id);\n  }\n\n  onChangeTitle(e: ChangeEvent<HTMLInputElement>) {\n    const title = e.target.value;\n\n    this.setState(function (prevState) {\n      return {\n        currentTutorial: {\n          ...prevState.currentTutorial,\n          title: title,\n        },\n      };\n    });\n  }\n\n  onChangeDescription(e: ChangeEvent<HTMLInputElement>) {\n    const description = e.target.value;\n\n    this.setState((prevState) => ({\n      currentTutorial: {\n        ...prevState.currentTutorial,\n        description: description,\n      },\n    }));\n  }\n\n  getTutorial(id: string) {\n    TutorialDataService.get(id)\n      .then((response) => {\n        this.setState({\n          currentTutorial: response.data,\n        });\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  updatePublished(status: boolean) {\n    const data: ITutorialData = {\n      id: this.state.currentTutorial.id,\n      title: this.state.currentTutorial.title,\n      description: this.state.currentTutorial.description,\n      published: status,\n    };\n\n    TutorialDataService.update(data, this.state.currentTutorial.id)\n      .then((response) => {\n        this.setState((prevState) => ({\n          currentTutorial: {\n            ...prevState.currentTutorial,\n            published: status,\n          },\n          message: \"The status was updated successfully!\"\n        }));\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  updateTutorial() {\n    TutorialDataService.update(\n      this.state.currentTutorial,\n      this.state.currentTutorial.id\n    )\n      .then((response) => {\n        console.log(response.data);\n        this.setState({\n          message: \"The tutorial was updated successfully!\",\n        });\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  deleteTutorial() {\n    TutorialDataService.delete(this.state.currentTutorial.id)\n      .then((response) => {\n        console.log(response.data);\n        this.props.history.push(\"/tutorials\");\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }\n\n  render() {\n    const { currentTutorial } = this.state;\n\n    return (\n      <div>\n        {currentTutorial ? (\n          <div className=\"edit-form\">\n            <h4>Tutorial</h4>\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"title\">Title</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"title\"\n                  value={currentTutorial.title}\n                  onChange={this.onChangeTitle}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"description\">Description</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"description\"\n                  value={currentTutorial.description}\n                  onChange={this.onChangeDescription}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label>\n                  <strong>Status:</strong>\n                </label>\n                {currentTutorial.published ? \"Published\" : \"Pending\"}\n              </div>\n            </form>\n\n            {currentTutorial.published ? (\n              <button\n                className=\"badge badge-primary mr-2\"\n                onClick={() => this.updatePublished(false)}\n              >\n                UnPublish\n              </button>\n            ) : (\n              <button\n                className=\"badge badge-primary mr-2\"\n                onClick={() => this.updatePublished(true)}\n              >\n                Publish\n              </button>\n            )}\n\n            <button\n              className=\"badge badge-danger mr-2\"\n              onClick={this.deleteTutorial}\n            >\n              Delete\n            </button>\n\n            <button\n              type=\"submit\"\n              className=\"badge badge-success\"\n              onClick={this.updateTutorial}\n            >\n              Update\n            </button>\n            <p>{this.state.message}</p>\n          </div>\n        ) : (\n          <div>\n            <br />\n            <p>Please click on a Tutorial...</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n*/\n\n///* mycode\nimport { Component, ChangeEvent } from \"react\"\nimport TutorialDataService from \"../services/tutorial.service\"\nimport { Link } from \"react-router-dom\"\nimport ITutorialData from \"../types/tutorial.type\"\n\ntype Props = {}\n\ntype State = {\n  tutorials: Array<ITutorialData>,\n  currentTutorial: ITutorialData | null,\n  currentIndex: number,\n  searchTitle: string\n}\n\nexport default class TutorialsList extends Component<Props, State>{\n  constructor(props: Props) {\n    super(props)\n    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this)\n    this.retrieveTutorials = this.retrieveTutorials.bind(this)\n    this.refreshList = this.refreshList.bind(this)\n    this.setActiveTutorial = this.setActiveTutorial.bind(this)\n    this.removeAllTutorials = this.removeAllTutorials.bind(this)\n    this.serchTitle = this.serchTitle.bind(this)\n\n    this.state = {\n      tutorials: [],\n      currentTutorial: null,\n      currentIndex: -1,\n      searchTitle: \"\"\n    }\n  }\n\n  componentDidMount() {\n    this.retrieveTutorials()\n  }\n\n  onChangeSearchTitle(e: ChangeEvent<HTMLInputElement>) {\n    const searchTitle = e.target.value\n\n    this.setState({\n      searchTitle: searchTitle\n    })\n  }\n\n  retrieveTutorials() {\n    TutorialDataService.getAll()\n      .then(response => {\n        this.setState({\n          tutorials: response.data\n        })\n        console.log(response.data)\n      })\n      .catch(e => {\n        console.log(e)\n      })\n  }\n\n  refreshList() {\n    this.retrieveTutorials()\n    this.setState({\n      currentTutorial: null,\n      currentIndex: -1\n    })\n  }\n\n  setActiveTutorial(tutorial: ITutorialData, index: number) {\n    this.setState({\n      currentTutorial: tutorial,\n      currentIndex: index\n    })\n  }\n\n  removeAllTutorials() {\n    TutorialDataService.deleteAll()\n      .then(response => {\n        console.log(response.data)\n        this.refreshList()\n      })\n      .catch(e => {\n        console.log(e)\n      })\n  }\n\n  serchTitle() {\n    this.setState({\n      currentTutorial: null,\n      currentIndex: -1\n    })\n\n    TutorialDataService.findByTitle(this.state.searchTitle)\n      .then(response => {\n        this.setState({\n          tutorials: response.data\n        })\n        console.log(response.data)\n      })\n      .catch(e => {\n        console.log(e)\n      })\n  }\n\n  render() {\n    const { searchTitle, tutorials, currentTutorial, currentIndex } = this.state \n\n    return (\n      <div className=\"list row\">\n        <div className=\"col-md-8\">\n          <div className=\"input-group mb-3\">\n            <input \n              type=\"text\" \n              className=\"form-control\"\n              placeholder=\"Serch by title\"\n              value={searchTitle}\n              onChange={this.onChangeSearchTitle}  \n            />\n            <div className=\"input-group-append\">\n                <button\n                  className=\"btn btn-outline-secondary\"\n                  type=\"button\"\n                  onClick={this.serchTitle}\n                >\n                  Serch\n                </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-6\">\n          <h4>Tutorials List</h4>\n\n          <ul className=\"list-group\">\n            {tutorials &&\n              tutorials.map((tutorial: ITutorialData, index: number) => (\n                <li \n                  className={\n                    \"list-group-item\" + (index === currentIndex ? \"active\" : \"\")\n                  }\n                  onClick={() => this.setActiveTutorial(tutorial, index)}\n                  key={index}\n                >\n                  {tutorial.title}\n              </li>\n            ))}\n          </ul>\n\n          <button\n            className=\"m-3 btn btn-sm btn-danger\"\n            onClick={this.removeAllTutorials}\n          >\n            Remove All\n          </button>\n        </div>\n        <div className=\"col-md-6\">\n          {currentTutorial ? (\n            <div>\n              <h4>Tutorial</h4>\n              <div>\n                <label>\n                  <strong>Title:</strong>\n                </label>{\" \"}\n                {currentTutorial.title}\n              </div>\n              <div>\n                <label>\n                  <strong>Description:</strong>\n                </label>{\" \"}\n                {currentTutorial.description}\n              </div>\n              <div>\n                <label>\n                  <strong>Status:</strong>\n                </label>{\" \"}\n                {currentTutorial.published ? \"Published\" : \"Pending\"}\n              </div>\n\n              <Link\n                to={\"/tutorial/\" + currentTutorial.id} \n                className=\"badge badge-waring\"\n              >\n                Edit\n              </Link>\n            </div>\n          ) : (\n            <div>\n              <br />\n              <p>Please click on a Tutorial...</p>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\n//*/","\n/* other code\nimport { Component } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddTutorial from \"./components/add-tutorial.component\";\nimport Tutorial from \"./components/tutorial.component\";\nimport TutorialsList from \"./components/tutorials-list.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <Link to={\"/tutorials\"} className=\"navbar-brand\">\n            bezKoder\n          </Link>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/tutorials\"} className=\"nav-link\">\n                Tutorials\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Add\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/tutorials\"]} component={TutorialsList} />\n            <Route exact path=\"/add\" component={AddTutorial} />\n            <Route path=\"/tutorials/:id\" component={Tutorial} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n*/\n\n///* mycode\nimport { Component } from 'react';\nimport { Switch, Route, Link } from \"react-router-dom\"\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\"\n\nimport AddTutorial from \"./components/add-tutorial.component\"\nimport Tutorial from \"./components/tutorial.component\"\nimport TutorialsList from \"./components/tutorials-list.component\" \n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <Link to={\"/tutorials\"} className=\"navbar-brand\">\n            hideq\n          </Link>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/tutorials\"} className=\"nav-link\">\n                Tutorials\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Add\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/tutorials\"]} component={TutorialsList} />\n            <Route exact path=\"/add\" component={AddTutorial} />\n            <Route path=\"/tutorials/:id\" component={Tutorial} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n    \nexport default App;\n//*/","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\"\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}